/*
lexical(렉시컬) 환경
    - 실행컨텍스트 안에 포함된 개념으로 스코프별로 메모리를 효율성있게 관리하는 영역이다
    - 변수선언, 실행코드, 외부호출코드연결 을 담당한다

콜스텍 :
    - 호출되는 코드또는 함수를 순차적으로 실행한다
    - 콜스텍에 실행컨텍스트가 포함됨


변수선언시 let, const를 활용하여 정확한 스코프 범위를 설정하는것이 중요하다.
*/
{    // 전역 스코프  : 얘는 보통 생략한다  , 변수,실행코드만 전역스코프에 들어감
    let a = 10;    // a= 전역변수
    console.log(`a = ${a}`);  
    {
        let b = 20;    // b,c 는 로컬변수
        console.log(`b = ${b}`);
            {
                let c = 30;
                console.log(`c = ${c}`);
                console.log(`a = ${a}`);       // a는 전역변수라 해당파일 어디에서는 출력됨
                
            }   // level 2   스코프
    }   // level 1  스코프
}  // 

/* 전역스코프칸에는 
전역에서 선언된
     let a = 10;    
    console.log(`a = ${a}`); 이거 두개만들어감

레벨1스코프칸에ㄴ도 변수, 실행코드만 들어간다 
let b = 20;    
        console.log(`b = ${b}`);


레벨2스코프칸에는
 let c = 30;
                console.log(`c = ${c}`);
                console.log(`a = ${a}`);      
                이케 들어감 

콜스텍에 실행컨텍스트 에 들어가기 전에 우선 코드를 한번 쫙읽고 렉시컬환경의 메모리공간에 스코프별로 나눠서 담아놓는다=> 전역스코프칸, 레벨1스코프칸.레벨2스코프칸 이케 다 나눠서 우선 내용ㅇ르 넣는다
실행컨텍스트가 코드를 ㅗ짝읽고 렉시컬에 스코프별로 나눠줌
실행컨텍스트에 변수저장영역이랑 렉시컬환경이랑 Eval function환경영역이 있는데 eval은 딱히 기억안해도됨

콜스텍이 실제 일을 담당한다.
자바스크립트는 싱글스레드형식이라 창고를 만들어서 실행 그래서 비동기가 생긴거임

하나의 렉시컬에는 환경레코드,외부환경레코드참조 이 두개가 있따
전역스코프칸에는 
    환경레코드(전역스코프의 정보들을 저장) 에 a=10 이 들어가잇음  콘솔로그는 여기 안들어감용
    외부환경레코드참조(outer environment record reference) 
    레벨1칸
    환경레코드(전역스코프의 정보들을 저장) 에 b=20
    외부환경레코드참조(outer environment record reference) 는 전역스코프칸을 참조하고잇음 레벨1칸은 전역스코프칸안에 포함되어잇으니까
    
    레벨2칸
    환경레코드(전역스코프의 정보들을 저장) 에 c=30
    외부환경레코드참조(outer environment record reference) 여기에는
    레벨1을 참조한다
    스코프체이닝(scope chainning) : 외부환경참조 하는거를 말함(단방향임)


로그a 가져올때는 실행컨텍스트가 전역스코프칸에가서 a값이 저장되어있는 변수저장영역에가서 데이터가져옪 ㅜ출력
이게 a 가 다 끝나도 렉시컬환경에 잇는 전역스코프칸은 안사라진다
c까지 다 출력이 완료되야 렉시컬환경에 잇는 내용이 다 사라지게 된다.


레벨2칸에잇는 얘 출렷하려면 우선 래벨2칸으로 감 근데 레벨2에는 a값이 없으니 외부참조한 레벨1한테 너 a값잇니 하고 레벨1칸으로 넘어감
레벨1칸에서도 a 없으니까 전역스코프칸으로 넘어가서 a 값을 찾는다 -->이케 되는거니까 전역변수는 어디서든 다 호출이 가능한거임
   console.log(`a = ${a}`);  


예) 전역스코프영역에서 console.log(b); 하면 에러뜨는 이유가
전역스코프칸에서 b값을 찾는데 없으니까 에러발생
전역스코프칸에서 레벨1칸으로는 절대 못감 !!! 하위칸에서 상위칸으로는 이동이 가능한데 상위에서 하위로는 절대로불가능


////////////////////////////////////////////////
var 는 전역변수임  var aa= 100;
var로 작성한 변수aa는 전역스코프칸에도 생성되고  a=10, aa  // var는 전역스코프에 저장될때 할당만하고 값은 저장되지않음
레벨2칸에도 에도 내용이 들어감 aa=100, b=10
그래서 콘솔로그로 aa 를 찍으면 레벨1칸에서 값을 우선 찾고 없어서 전역스코프칸에서 찾음 근데 전역스코프에는 값은 저장이 안돼서 undefined로 뜸
그래서 변수선언시 var는 거의 안쓴다
var로 선언한 객체는 선언은 전역에서 하고 값이 할당되는건 해당하는 레벨칸에만 된다
let a =10;
    {
        let b =10;
        console.log(aa);
       {
            let c =20;
            var aa =100;
       }
    }


*/

console.log(`---------------------------------`);
//var 예제

{ 
    let a = 10;   
    console.log(`a = ${a}`); 
    console.log(`aa = ${aa}`); 
    {
        let b = 20;    
        var aa =100;
        console.log(`b = ${b}`);
        console.log(`aa = ${aa}`);
            {
                let c = 30;
                console.log(`c = ${c}`);
                console.log(`a = ${a}`);      
                
            }   // level 2   스코프
    }   // level 1  스코프
}  // 전역스코프


