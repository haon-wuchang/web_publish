-- 001)사원테이블에서 사원아이디,사원명,성별,입사일을 조회하기

-- 002)사원테이블에서 사원명,부서명,입사일,폰번호,연봉을 조회하기

-- 003)부서테이블의 모든 컬럼을 조회하기

-- 004)사원테이블에서 아이디,성명,입사일,부서명,연봉 별칭을 바꿔서 조회 컬럼을 출력하기      

-- 005)사원테이블에서 사원명,부서명,연봉을 조회하라

-- 006)현재의 날짜를 조회하라, 컬럼명을 date 로 변경하라

-- 007)사원테이블에서 sys 부서에 근무하는 모든 사원을 조회하라

-- 008)사원테이블에서 사원명이 '정주고'인 사원을 조회하라

-- 009)사원테이블에서 사원아이디가 S0011 인 사원의 정보를 모두 조회하라

-- 010)사원테이블에서 연봉이 5000인 사원의 모든 정보 조회

-- 011)사원테이블에서 여성사원들의 아이디,이름, 입사일,이메일 정보를 조회하라
	-- 출력되는 아이디 컬럼명을 '사원번호'로 변경하라

-- 012)사원테이블에서 부서명이 sys 인 사원들의 아이디,사원명,입사일을 조회

-- 013)사원테이블에서 마케팅부서의 모든사원정보를 조회하라

-- 014)사원테이블에서 입사일이 2014년 8월 1일인 모든 사원 조회하라 

-- 015)연봉이 5000인 사원 정보 조회
-- 복습할때는 cmder 이나 다른 터미널에서 하기 !!


-- 016)사원테이블에서 eng_name 이 null 인 모든사원정보를 조회하라

-- 017)연봉이 정해지지 않은 사원을 조회하라

-- 018)eng_name 이 null인 사원들은 'smith' 이름으로 변경 후 조회하라
	-- 출력되는 컬럼명은 eng_name2 로 변경하라
    
-- 019)모든 사원의 아이디,사원명,입사일,퇴사일을 조회하라
	-- 현재 근무중인 사원의 퇴사일에 현재의 날짜를 출력하라

-- 020)사원테이블에서 사원번호와 부서컬럼을 출력하라(중복배제)

-- 021)명령어가 실행된시점에서 저장소에서 제일가까운곳부터 데이터를 넣기때문에 정렬이 되어있지 않다

-- 022)사원테이블에서 사원명,사원아이디,입사일,연봉을 조회하라
	-- 사원아이디 기준 오름차순으로 정렬하라

-- 023)사원아이디 기준 오름차순 정렬을 하고 입사일 기준으로 내림차순으로 정렬하라

-- 024)급여를 기준으로 오름차순으로 정렬 후 조회

-- 025)eng_name 이 정해지지 않은 사원들을 최근 입사한 순서대로 조회

-- 026)퇴직한 사원들을 급여가 높은 순으로 조회 

-- 027)정보시스템 부서의 사원들 중 급여가 높은 순으로 조회

-- 028)정보시스템 부서의 사원들 중 최근 입사일 기준, 급여가 낮은 순으로 조회하라

-- 029)사원중에서 연봉이 5000 이상인 사원들을 조회

-- 030)입사일이 2016년 1월1일 이전에 입사한 사원들 조회

-- 031)입사일이 2015년 1월 1일 이후이고, 급여가 6000이상인 사원들을 조회

-- 032)입사일이 2015년 1월 1일 이후이거나, 급여가 6000이상인 사원들을 조회

-- 033)입사일이 2015년 1월 1일부터 2017년 12월 31일 사이에 입사한 사원들을 조회

-- 034)연봉구간이 5000 이상 부터 7000미만 사이의 사원들을 조회

-- 035)2016년 입사자를 조회

-- 036)사원아이디가 'S0001' 'S0010' 'S0020' 인 사원의 모든 정보를 조회하라

-- 037)부서아이디가 MKT, GEN, HRD 인 부서에 속한 모든 사원을 조회

-- 038)사원아이디가 'S0001' 'S0010' 'S0020' 인 사원의 모든 정보를 조회하라

-- 039)부서아이디가 MKT, GEN, HRD 인 부서에 속한 모든 사원을 조회

-- 040)영어 이름이 f 로 시작하는 모든 사원들을 조회

-- 041)'한'씨 성을 가진 모든 사원들을 조회

-- 042)이메일 주소의 두번째 자리에 'a'가 들어가는 모든 사원을 조회

-- 043)이메일 주소가 4자리인 모든 사원을 조회하라

-- 044)이름에 '삼'이 들어가는 모든 사원을 조회하라

-- 045)3자리의 정수를 생성하고 생성한 정수를 2로 나누는 모듈러 함수를실행하는 쿼리를 완성해라

-- 046)사원테이블에서 사원아이디,사원명,부서아이디,입사일,연봉, 인센티브(연봉의 20%) 를 조회하라
	-- 인센티브의 소수점 생략하라
	-- 연봉협상이 아직 진행되지 않은 사원은 모두 0으로 출력, 인센티브 포함
	-- 연봉이 5000 미만의 사원들 정보만 출력

-- 047)사원테이블의 사원명과 영어이름을 결합하여 새로운 컬럼을 생성하고 컬럼명은 test_name 으로 실행하라
	-- 영어이름이 정해지지않은 사원은 빈 문자열로 치환해서 실행하라

-- 048)사원테이블에서 사원아이디와 5자리의 임의의 정수를 결합하여 사원번호라는 새로운 컬럼을 생성하고 조회하라
	-- 사원아이디, 사원명, 입사일,급여, 퇴사일, 사원번호 를 조회하라
	-- 현재 근무중인 사원은 현재 날짜를 퇴사일에 입력해주세요

-- 사원테이블에서 사원아이디,사원명,입사년도,입사월,입사일,급여를 조회하라
    
-- 2015년도에 입사한 모든 사원을 조회하라

-- 2018년도에 정보시스템부서sys에 입사한 모든 사원들을 조회

-- 2014년도에 입사한 모든 사원을 조회하라

-- 모든 사원의 폰번호 마지막 4자리를 조회하라

-- 사원테이블의 사원아이디,사원명,입사일,연봉을 조회하고, 연봉 협상 전인 사원은 0 으로 변환 후 조회하고,
-- 연봉은 3자리씩 , 로 구분하여 조회한다

-- 사원아이디, 사원명, 부서명,입사일, 연봉, 보너스(연봉0.05%) 조회하고
	-- 연봉과 보너스 컬럼은 3자리씩 ,로 구분해여 출력 후 '만원' 을 추가
	-- 보너스 컬럼은 소숫점 1자리까지 출력한다

-- 사원테이블의 입사일 포맷을 변경 '2015-01-01' 을 '2015/01/01' 로 변경하라

-- 사원테이블에서 모든 사원의 연봉 총합을 조회, 3자리씩 끊어서 조회

-- 사원들의 총연봉과 평균연봉을 조회

-- 사원들의 총연봉, 평균연봉, 최소연봉, 최대연봉을 조회 

-- 총사원수를 구하고 퇴직사원수, 현재근무하는사원수를 조회

-- 사원테이블에서 정보시스템부서의 사원수를 구하라

-- 2015년도에 입사한 사원수를 조회

-- 가장 최근 입사자와 가장 오래된 입사자의 입사일 조회

-- hrd 부서의 가장 최근 입사자와 가장 오래된 입사자의 입사일 조회

-- 마케팅부서 기준 가장 낮은 연봉과 높은 연봉을 조회

-- 사원테이블에서 부서별 사원수를 조회

-- 입사년도 별 총연봉, 평균연봉, 최저연봉,최고연봉, 입사사원수를 조회

-- 부서별 총연봉, 평균연봉, 최저연봉,최고연봉, 입사사원수를 조회

-- 부서별 평균연봉 조회
	-- null 값이 포함된 경우 0 으로 변환
	-- 소숫점자리는 절삭
	-- 부서 평균연봉이 6000 이상인 부서만 조회
    -- 평균연봉 기준 오름차순으로 ( 정렬은 항상 마지막에 한다)

-- 입사년도 기준 총연봉, 평균연봉을 조회
	-- 총연봉이 6500 이상인 사원들만 출력
	-- null 값을 포함한경우 0 으로 처리

-- 부서별 남 녀 사원의 사원수를 조회

-- 부서별 총 연봉을 조회( 연봉이 정해지지않은 부서는 포함하지 않음)

-- 사원들의 휴가 사용 내역 조회

-- 사원아이디별 휴가상신횟수, 총휴가사용일 조회 , 총휴가사용일을 기준으로 내림차순 정렬하라

-- 2016~2017 년도 사이에 사원아이디별 휴가사용 횟수 조회
	-- 리포팅함수 사용, '사원별휴가사용총합' 컬럼명 추가

-- 입사년도 별 평균연봉을 조회 (연봉이 정해지지않은 부서는 포함하지 않음, 평균연봉이 6000 이상인 입사년도만 출력)
	-- 리포팅함수 사용, '연도별 총합계' 컬럼명 추가

-- emp 테이블 생성
-- 컬럼리스트 : emp_id 고정형(4), emp_name 가변형(10), hire_date 날짜/시간, salary 정수(5)

-- dept 테이블 생성 : dept_id 고정형3, dept_name 가변형10, loc 가변형20

-- 정보시스템 부서의 사원들만 별도로 테이블 복제하기
	-- 테이블명 : employee_sys

-- 퇴직한 사원들을 복제하여 employee_retire 테이블로 관리

-- 2015년,2017년 입사자들을 복제하여 관리
	-- 테이블명 : employee_2015_2017

-- employee_2015_2017 테이블 제거

-- 재직중인 사원테이블 복제 employee_working

-- employee_working 테이블의 모든 데이터(row)를 제거하기

-- employee_working 테이블에 bonus 컬럼 추가 , 데이터타입 : 정수형 4자리 , null 값 허용 

-- employee_working 테이블에 dname 컬럼 추가 , 데이터타입 : 가변형 10 null 값 허용

-- employee_working 테이블의 email컬럼의 크기를 30으로 수정

-- employee_working 테이블의 salary 컬럼을 실수타입(더블)로 수정

-- employee_working 테이블의 bonus,dname 컬럼 삭제

-- employee 테이블에서 hrd 부서의 속한 사원들의 사원아이디,사원명,입사일,연봉,보너스(연봉*0.1) 정보를 
	-- 별칭을 사용하여 조회한 후 , employee_hrd 이름으로 복제하라

-- emp 테이블에 데이터 추가 S001,사필안,현재날짜,1000

-- emp 테이블에 데이터 추가 S002,홍길동,현재날짜,2000

-- emp 테이블에 데이터 추가 S003,범무구,현재날짜,3000
	-- 컬럼리스트 생략하여 진행

-- emp 테이블에 데이터 추가 S004,이삐란,현재날짜(now,sysdate),연봉협상x

-- employee 테이블의 정보시스템부서의 사원들이며 2016년 이전에 입사한 사원들 정보 중
	-- 사원아이디,사원명,입사일,부서아이디,연봉을 복제하여,
	-- employee_sys 테이블을 생성하라

-- employee_sys 테이블에 2016년도 이후에 입사한 정보시스템 부서 사원을 추가 하라(서브쿼리를 이용한 데이터추가)

-- dept 테이블 구조 확인 및 데이터 추가
	-- sys, 정보시스템, 서울
    -- mkt , 마케팅, 뉴욕
    -- hrd, 인사 ,부산  
    -- acc, 회계, 정해지지않음

-- emp_const 테이블 생성
	-- emp_id char4-기본키제약, emp_name varchar10-유니크제약, hire_date date, salary int-not null 제약
    
-- emp_const 에 데이터 추가
	-- 	S001, 홍길동,현재날짜,1000

-- 제약사항 테스트를 위한 테이블 생성 : const_test
	-- 컬럼명: UID char4 기본키제약 , name varchar10 not null, 
	--  	age int null허용, addr varchar30 null 허용

-- const_test테이블에 dept_id 컬럼을 추가 => char(3) 디폴트제약, 기본값은 'HRD' 

--  const_test에 S001, 홍길동, 20 , 서울시 , SYS부서 insert 작업을 해라

-- const_test에 S002, 범무구, 20 , 중국 , HRD부서 insert 작업을 해라(HRD 는 디폴트로 줘서 입력안해도 알아서 들어감 근데 제약사항에 not null이면 에러뜬다

-- const_test에 salary컬럼을 추가 : int : 연봉이 3000이상인 숫자만 등록되게 체크=>check제약

--  const_test S004, 이삐묵, 5 , 서울시 , HRD부서,3000  insert 작업을 해라

-- 상품테이블 생성 product_test
	-- 컬럼 : PID INT PRIMARY KEY, PNAME VARCHAR(30) NOT NULL, PRICE INT NULL허용, COMPANY VARCHAR(20) NULL 허용
	-- !!!!!!!!auto_increment 사용 => 기본키에 적용하라

--  product_test 키보드, 100, 삼성 데이터를 insert 하라

-- const_test 테이블의 홍길동 사원의 연봉을 업데이트 하라 3500

--  const_test 사필안의 연봉을 5000 으로 업데이트 진행

-- employee 테이블을 복제하여 cp_employee 테이블을 생성하라

-- cp_employee 테이블의 emp_id 컬럼에 기본키제약 추가 

-- cp_employee phone,email 에 유니크제약추가

-- cp_employee 테이블의 폰에 추가된 제약사항 삭제 (제약명으로 삭제하면된다)

--   cp_employee sys인 부서아이디를 '정보' 로 수정
	
--  cp_employee 2016년도에 입사한 사원들의 입사일 -> 현재날짜로 수정

--  cp_employee 강우동 사원의 영어이름을 kang 로 수정, 입사일을 현재 날짜로 수정, 부서는 sys 로 수정

--  cp_employee 강우동 사원 삭제

--  cp_employee 김삼순 삭제

--  cp_employee연봉이 7000 이상인 사원 삭제

-- cp_employee  정보시스템부서 직원들 모두 삭제

--  cp_employee 2017년 이후 입사자들 모두 삭제 (터미널이용)

-- 예 ) KK전자의 인사관리시스템 : 사원테이블 생성  => 정규화 진행
-- 사원테이블의 데이터 : 사원아이디(kid, primary key), 사원명 , 주소 , 입사일 , 연봉, 부서번호 ,부서명, 부서위치 


/*
	학사관리 시스템 설계
    1. 과목테이블 subject
    - sid(과목번호)- 기본키 자동생성, sname(과목명)- 널허용안함, sdate(과목등록일)- 년월일시분초
    
    2. 학생테이블 student
    - 반드시 하나이상의 과목을 수강해야한다
    - stid(학생번호)- 기본키 자동생성, sname(학생명)- 널허용안함, gender(성별)- 문자1자 널허용안함,
    - sid(과목번호),stdate(등록일)- 년월일시분초
    
    3. 교수테이블 professor
    - 교수테이블은 반드시 하나이상의 과목을 강의해야한다
    - pid(교수아이디)- 기본키 자동생성, pname(교수명)- 널허용안함, sid(과목아이디), pdate(등록일자)- 년월일시분초
*/

-- 과목테이블에 데이터 추가

-- 학생 데이터 추가

-- 교수데이터 추가

-- html 과목 조회

 -- 교수테이블과 학생테이블의 cross join

-- professor,student,department 테이블의 모든데이터를 조회하라
            
-- inner join 을 이용해 subject & professor 테이블을 조인하라
            
-- html 과목을 강의하는 모든 교수 조회

 -- 멋교수가 강의하는 과목아이디, 과목명, 교수아이디, 교수명, 교수등록일을 조회하라 (오라클, 앤씨 방식 2가지 다 진행)
            
-- html 과목을 수강하는 모든 학생 조회 ( 오라클, 앤씨 방법 둘 다 사용해서 조회)

-- html 과목을 수강하는 모든학생과 강의하는 모든 교수 조회 !!!!

-- employee , department, vacation, unit 의 테이블 erd 를 참조하여
-- 모든 사원들의 사원번호,사원명,성별,부서명(dept_name),입사일 을 조회하라 ( 조인 사용)
	-- 사원번호 기준으로 오름차순을 하라
select emp_id,emp_name,gender,dept_name,hire_date 
	from employee e, department d
    where e.dept_id=d.dept_id
    order by emp_id;

-- 영업 부서에 속한 사원들의 사원번호,사원명,입사일,연봉,부서명을 조회(조인사용)
    select * 
		from department d, employee e
        where e.dept_id=d.dept_id and dept_name='영업';
    
-- 인사과에 속한 사원들중 휴가를 사용한 사원들의 리스트를 모두 조회 (조인사용)

select * from department d, vacation v , employee e
	where d.dept_id = e.dept_id and v.emp_id = e.emp_id and dept_name = '인사';

-- 휴가사용이유가 두통 인 사원들 중에
-- 영업부서인 사원의 사원명,폰번호,부서명,휴가사용이유,소속본부(유닛) 조회 (조인사용)
select * from vacation v , employee e , department d
	where v.emp_id = e.emp_id and e.dept_id = d.dept_id and
    reason = '두통' and dept_name = '영업';

-- 2014년도부터 2015년도까지 입사한 사원들 중에서 퇴사하지않은 사원들의
	-- 사원아이디,사원명,부서명,입사일,소속본부를 조회 (조인사용)
	-- 소속본부기준으로 오름차순 진행
    select unit_name, e.emp_id, d.dept_name, hire_date
		from employee e, department d , unit u
        where e.dept_id = d.dept_id and d.unit_id = u.unit_id and
			left(hire_date,4) between '2014'and '2015' and retire_date is null; 
    
-- department unit 테이블을 참고하여
-- 모든 부서의 부서아이디, 본부아이디, 본부명 을 조회하라
select dept_id,u.unit_id,unit_name
	from department  d left outer join unit u
    on d.unit_id = d.unit_id;

-- 2017년부터 2018년까지 입사한 사원들의 사원명,입사일,연봉,부서명,소속본부명,소속본부아이디 을 조회하라
	-- 단 퇴사한 사원들은 제외하여 조회하라
    -- unit_id 가 없는 '고소해'도 출력이 되어야한다
    select * from employee e inner join department d on e.dept_id=d.dept_id
						left outer join unit u on d.unit_id = u.unit_id
		where left(hire_date,4) between '2017'and '2018'
			and retire_date is null;
    
-- subject, student 테이블을 사용하여 학생들이 선택하지 않은 과목을 조회하라
select *
	from subject su left outer join student st
    on su.sid = st.sid;

-- emp 테이블에 emp_id 컬럼에 기본키제약 추가

-- emp 테이블에 mgr 컬럼을 추가 ( emp_id 를 self join 할 컬럼임 )

-- sys 부서의 사원들의 매니저를 홍길동(S0001)으로 수정하라

-- mkt 부서의 사원들의 매니저를 오감자(S0011)으로 수정하라

-- hrd 부서의 사원들의 매니저를 정주고(S0019)으로 수정하라

-- emp테이블 :  홍길동 사원이 관리하는 모든 사원들의 사원번호,사원명,입사일,연봉,부서아이디,매니저사원번호 을 조회
select  * from emp;

select *
	from emp e, emp manager
	where e.emp_id = manager.mgr ; 
      
                

                
-- emp테이블 : hrd 부서를 관리하는 매니저의 사원번호,사원명,입사일,연봉,부서아이디,매니저번호, 부서명을 조회



-- emp테이블 : 매니저가 없는 사원의 사원번호,사원명,입사일,연봉,부서아이디를 조회

-- emp테이블 : 홍길동 사원이 관리하는 사원들의 사원명,연봉,매니저가 관리하는 사원번호,매니저가 관리하는 사원명,매니저사원아이디 조회하라

-- emp테이블 : 단일행서브쿼리 :  홍길동 사원이 사용한 휴가 내역을 조회
	-- 단, 2017~2018 년도의 휴가내역만 조회하라

-- emp테이블 :제3본부에 속한 부서들을 모두 조회

-- emp테이블 :제3본부에 속한 사원들을 모두 조회 ( ADV, MKT ) : 다중행
		
-- emp테이블 :가장먼저 입사한 사원의 정보를 조회

-- emp테이블 :급여가 가장 높은 사원의 정보 조회

-- emp테이블 :정보시스템 부서의 사원중에 휴가를 사용한 사원들을 조회

-- emp테이블 :정보시스템 부서의 사원중에 휴가를 사용하지 않은 사원들을 조회 

-- emp테이블 :정보시스템 부서 사원들의 사원명,사원아이디,입사일 조회

-- emp테이블 :모든 사원의 사원아이디,사원명,연봉,부서아이디를 조회( 출력행 포함 )

-- 인라인뷰 예제
-- emp테이블 :사원별 휴가사용 일수를 그룹핑하여, 사원아이디,사원명,입사일,연봉,휴가사용일수를 조회
	-- 휴가사용일수를 구하는 인라인뷰와 사원테이블을 조인하라
        
-- emp테이블 :hrd 부서 사원들의 휴가 사용 일수와 사원아이디,사원명,부서아이디,부서명을 조회 ( 출력용 숫자도 조회)

-- emp테이블 :[휴가를 사용한 사원정보만 출력] 사원별 휴가사용 일수를 그룹핑하여 
    -- 사원아이디, 사원명,입사일, 연봉, 휴가사용일수를 조회하라
    
-- emp테이블 :[전체사원의 휴가일수 조회 :  휴가를 사용하지 않은 사원 + 휴가를 사용한 사원 ]
	-- 사원별 휴가결제횟수,휴가전체사용일수를 그룹핑하여
	-- 사원아이디,사원명,입사일,연봉,휴가결제횟수,휴가전체사용일수를 조회하라 (outer join 사용 )
	-- 단. 휴가를 사용하지 않은 사원의 휴가결제횟수,휴가전체사용일수는 0으로 할당하라

-- 스칼라 서브쿼리 예제
-- emp테이블 :hrd 부서의 사원의 사원아이디,사원명, 부서아이디, 부서명, 본부이름 조회

-- emp테이블 :급여 순으로 사원들을 정렬 | 출력번호, 사원아이디, 사원명, 입사일, 부서아이디, 연봉을 조회
	-- ( 단 상위 5명만 출력하라 ) 

-- emp테이블 :입사일이 가장 빠른 사원 10명의 사원아이디,사원명,부서아이디,입사일 조회

-- emp테이블 :사원들의 급여합계가 가장 작은 부서의 사원들을 조회
    
-- self join 을 서브쿼리로 변경해서 사용
-- emp테이블 :홍길동 사원이 관리하는 모든 사원들의 사원번호,사원명, 입사일, 급여 ,부서아이디, 부서명 조회

-- emp테이블 :hrd 부서를 관리하는 매니저의 사원번호,사원명, 입사일, 급여 ,부서아이디, 부서명 조회

-- emp테이블 :매니저가 없는 사원의 사원번호,사원명,입사일,연봉,부서아이디,부서명, 본부 조회 

-- emp테이블 :HRD 부서의 사원아이디,사원명,부서아이디,연봉
-- emp테이블 :SYS 부서의 사원아이디,사원명,부서아이디,연봉 실행결과를 합치기

-- emp테이블 :영업과 정보시스템 부서로 조회

-- emp테이블 :2013~2016 년 사이에 입사한 사원과 ,sys 부서의 사원들의 사원아이디,사원명,부서아이디,폰번호, 연봉 조회(union 사용,중복제외)

-- emp테이블 :2013~2015연도별 부서들의 연봉합계가 가장 높은 부서만 조회  

-- emp테이블 :employee, department, unit 테이블을 조인한 뷰를 생성
-- 뷰 이름 : view_emp_dept_unit	

-- emp테이블 :2013~2015연도별 부서들의 연봉합계가 가장 높은 부서만 조회  (뷰 사용) 뷰이름:view_sum_salary

-- emp테이블 :매니저에 따라 각각 관리하는 모든 사원들의 
-- 사원번호,사원명, 입사일, 급여 ,부서아이디, 부서명 조회하는 쿼리 생성후 뷰로 저장
-- view 이름 : view_emp_mgr  
        
	-- 위에서 생성한 뷰를 사용해 홍길동 매니저가 관리하는 사원 조회


-- emp테이블 :[전체사원의 휴가일수 조회 :  휴가를 사용하지 않은 사원 + 휴가를 사용한 사원 ]
	-- 사원별 휴가결제횟수,휴가전체사용일수를 그룹핑하여
	-- 사원아이디,사원명,입사일,연봉,휴가결제횟수,휴가전체사용일수, 부서아이디,부서명,소속본부 를 조회하라 
	-- 단. 휴가를 사용하지 않은 사원의 휴가결제횟수,휴가전체사용일수는 0으로 할당하라
    -- 뷰이름 : view_emp_vacation	


































